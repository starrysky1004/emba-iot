# Need to add -c option 
export FORMAT_LOG=0 # Disable colorized log formatting
export THREADED=1   # Enable multithreading
export SHORT_PATH=0 # Only relative paths are shown in the log
export HTML=0       # Do not generate reports in HTML format
export DISABLE_DOTS=1  # No dots in terminal
export YARA=1       # Enable YARA

# multiple sbom not only optimisations
SBOM_MINIMAL=0

# if no deep extraction is needed it can be disabled here - sometimes useful for
# non Linux stuff like sources or Windows exe (could be also configured via -q parameter)
export DISABLE_DEEP=0   # Enable deep fetch

# VEX metrics (check for KEV, Exploits, EPSS) -> F17 module is not enabled by default
export VEX_METRICS=1

# QEMULATION - for user-mode emulation to generate an optimised SBOM
export QEMULATION=1 #Enable QEMU user mode emulation

export SELECT_MODULES+=( "S03" "S06" "S08" "S09" )                 # Basic Information and check
export SELECT_MODULES+=( "S21" "S22" "S27" )                       # Check scripts (shell / python / php / perl)
export SELECT_MODULES+=( "S24" "S25" "S26" )                       # Extract kernel version and find related CVE and verifier
export SELECT_MODULES+=( "S17" )                                   # cwe_checker
export SELECT_MOFULES+=( "S106" "S107" "S108" "S109" )		   # Search and beruteforcing hashed passwords
export SELECT_MODULES+=( "F10" "F15" "F17" )                       # Final modules

# we can enable/disable the s08 submodules with the following array configuration -> just comment the submodule
# that should not be used
export S08_MODULES_ARR=()
S08_MODULES_ARR=( "S08_submodule_debian_pkg_mgmt_parser" )
S08_MODULES_ARR+=( "S08_submodule_deb_package_parser" )
S08_MODULES_ARR+=( "S08_submodule_openwrt_pkg_mgmt_parser" )
S08_MODULES_ARR+=( "S08_submodule_openwrt_ipk_package_parser" )
S08_MODULES_ARR+=( "S08_submodule_rpm_pkg_mgmt_parser" )
S08_MODULES_ARR+=( "S08_submodule_rpm_package_parser" )
S08_MODULES_ARR+=( "S08_submodule_bsd_package_parser" )
S08_MODULES_ARR+=( "S08_submodule_python_pip_package_mgmt_parser" )
S08_MODULES_ARR+=( "S08_submodule_python_requirements_parser" )
S08_MODULES_ARR+=( "S08_submodule_python_poetry_lock_parser" )
S08_MODULES_ARR+=( "S08_submodule_java_archives_parser" )
# S08_MODULES_ARR+=( "S08_submodule_ruby_gem_archive_parser" )
# S08_MODULES_ARR+=( "S08_submodule_alpine_apk_package_parser" )
S08_MODULES_ARR+=( "S08_submodule_windows_exifparser" )
S08_MODULES_ARR+=( "S08_submodule_rust_cargo_lock_parser" )
S08_MODULES_ARR+=( "S08_submodule_node_js_package_lock_parser" )
S08_MODULES_ARR+=( "S08_submodule_c_conanfile_txt_parser" )
S08_MODULES_ARR+=( "S08_submodule_perl_cpan_parser" )
S08_MODULES_ARR+=( "S08_submodule_php_composer_lock" )
S08_MODULES_ARR+=( "S08_submodule_python_pipfile_lock" )
# S08_MODULES_ARR+=( "S08_submodule_apk_pkg_mgmt_parser" )

# we output the profile only at the beginning - outside the docker environment
if [[ $IN_DOCKER -ne 1 ]] ; then
  print_output "$(indent "$(orange "Adds ANSI color codes to log")")" "no_log"
  print_output "$(indent "$(orange "Activate multi threading")")" "no_log"
  print_output "$(indent "$(orange "Prints only relative paths")")" "no_log"
  print_output "$(indent "$(orange "Activates web report creation in log path")")" "no_log"
  if [[ "$USE_DOCKER" -ne 1 ]]; then
    print_output "$(indent "$(orange "Enables automated qemu emulation tests (WARNING this module could harm your host!)")")" "no_log"
  else
    print_output "$(indent "$(orange "Enables automated qemu emulation tests")")" "no_log"
  fi
  print_output "$(indent "$(orange "Runs EMBA in docker container")")" "no_log"
  print_output "$(indent "$(orange "Enabled EMBA module via profile")")" "no_log"
  for MODULE_ in "${SELECT_MODULES[@]}"; do
    print_output "$(indent "$(orange "Enabled module: $MODULE_")")" "no_log"
  done
  export USE_DOCKER=1
fi
